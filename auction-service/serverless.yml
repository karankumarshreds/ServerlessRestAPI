service:
  name: auction-service

plugins:
  # allows you to bundle and use es6 syntax
  - serverless-bundle
  # allows you to use aws params in your code
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  # defines the env of your lambda
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yaml):AuctionsTableIAM}

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yaml):AuctionsTable}

functions:
  CreateAuction:
    handler: src/handlers/create-auction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.Authorizer}
  GetAuctions:
    handler: src/handlers/get-auctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.Authorizer}
  GetAuction:
    handler: src/handlers/get-auction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: ${self:custom.Authorizer}
  PlaceBid:
    handler: src/handlers/place-bid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: ${self:custom.Authorizer}
  ProcessAuctions:
    handler: src/handlers/process-auctions.handler
    # check logs from cli
    # sls logs -f ProcessAuctions
    # events:
    #   - schedule: rate(5 minutes)

# custom properties
custom:
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  Authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  ## original value arn:aws:lambda:ap-south-1:442826973968:function:auth-service-dev-auth
  ## use hash to call AWS related values and $ to call serverless variables
